class RecordingScreen extends StatelessWidget {
  final int taskId;
  final String taskName;
  final RecordingController _controller;

  RecordingScreen({required this.taskId, required this.taskName})
      : _controller = Get.put(RecordingController(taskId), permanent: true);

  @override
  Widget build(BuildContext context) {
    final ThemeData themeData = Theme.of(context);
    final isLightTheme = themeData.brightness == Brightness.light;

    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(kToolbarHeight),
        child: Neumorphic(
          style: appBarStyle(context),
          child: AppBar(
            title: Text(taskName,
                style: TextStyle(fontSize: 20, color: Colors.white)),
            centerTitle: true,
            iconTheme: IconThemeData(
                color: isLightTheme ? Colors.black : Colors.white),
          ),
        ),
      ),
      body: Obx(() {
        if (_controller.isTimeUp.value) {
          Future.microtask(() => showCongratulationsPopup(context));
        }

        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Stack(
                alignment: Alignment.center,
                children: [
                  Image.asset(
                    'assets/images/timerbody.png',
                    fit: BoxFit.cover,
                  ),
                  Image.asset(
                    'assets/images/timertranspaent.png',
                    fit: BoxFit.contain,
                  ),
                  Obx(() {
                    return Text(
                      _controller.time.value, // Display the updated time value
                      style: TextStyle(
                        fontSize: 24,
                        color: Colors.white70,
                        fontWeight: FontWeight.bold,
                      ),
                    );
                  }),
                ],
              ),
              const SizedBox(height: 20),
              // Toggle button for play/stop
              GestureDetector(
                onTap: () {
                  if (_controller.isRecording.value) {
                    _controller.stopRecording();
                  } else {
                    _controller.startRecording();
                  }
                },
                child: Stack(
                  alignment: Alignment.center,
                  children: [
                    Image.asset(
                      'assets/images/pauseplay.png',
                      fit: BoxFit.contain,
                      width: 100,
                      height: 100,
                    ),
                    Obx(() {
                      return Icon(
                        _controller.isRecording.value
                            ? Icons.stop
                            : Icons.play_arrow,
                        size: 50,
                        color: Colors.white,
                      );
                    }),

                  ],
                ),
              ),
            ],
          ),
        );
      }),
    );
  }

  void showCongratulationsPopup(BuildContext context) {
    Get.dialog(
      Center(
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.transparent, // Semi-transparent background
            borderRadius: BorderRadius.circular(10),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Congratulations!',
           style: subheadingStyle(context).copyWith(
            color: Colors.green,
          ),
              ),
              const SizedBox(height: 20),
              Text(
                'You have completed today\'s target!',
                style: subheadingStyle(context),
              ),
              const SizedBox(height: 40),

              Text('Your Target will resume in 5 seconds',style:subheadingStyle(context)),
            ],
          ),
        ),
      ),
      barrierDismissible: false,
    );

    Future.delayed(Duration(seconds: 5), () {
      if (Get.isDialogOpen == true) {
        Get.back();

        _controller.isDialogShown.value = false;
      }

      // Resume the timer automatically
      if (!_controller.isRecording.value) {
        _controller.startRecording();
      }
    });
  }
}
